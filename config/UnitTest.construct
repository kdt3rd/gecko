
local fasttests = item.new( "__fast_unit_tests" )
fasttests:force_tool( "<pseudo>" )
fasttests:set_pseudo_target( "test" )
fasttests:set_use_name_for_input( false )
fasttests:set_default_target( false )

local alltests = item.new( "__all_unit_tests" )
alltests:force_tool( "<pseudo>" )
alltests:set_pseudo_target( "test_all" )
alltests:set_use_name_for_input( false )
alltests:set_default_target( false )

local AddSlowUnitTest = function( fname, l, cmdline, isfast )
	assert(type(fname)=="string", "Expecting a single filename as a unit test")
	testname = "test_" .. file.basename( fname )
	unitname="__unit_"..testname
	e = executable( testname )
	  source( fname )
	  libs( l or {} )
	e:set_default_target( false )
	e:set_variable( "exe_dir", "unit_tests" )
	local descstr
	if isfast then
		descstr = "QUICK_TEST "
	else
		descstr = "TEST "
	end
	if cmdline then
		add_tool{
			tag=unitname,
			name=unitname,
			exe=e,
			options={},
			option_defaults={},
			cmd={"$exe", "-q", table.unpack(cmdline) },
			description=descstr..testname,
			pool="console"
		}
	else
		add_tool{
			tag=unitname,
			name=unitname,
			exe=e,
			options={},
			option_defaults={},
			cmd={"$exe", "-q"},
			description=descstr..testname,
			pool="console"
		}
	end
	-- by making it a strange name, it should never be
	-- generated so should run every time
	ut = item.new( "__unit_tests/"..testname )
	ut:force_tool( unitname )
	ut:set_default_target( false )
	ut:set_use_name_for_input( false )
	ut:add_dependency( "implicit", e )
	alltests:add_dependency( "implicit", ut )
	return ut
end

local AddUnitTest = function( fname, l, cmdline )
	ut = AddSlowUnitTest( fname, l, cmdline, true )
	fasttests:add_dependency( "implicit", ut )
	return ut
end

return {AddUnitTest, AddSlowUnitTest}
