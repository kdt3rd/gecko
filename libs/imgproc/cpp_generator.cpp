
#include "cpp_generator.h"
#include "variable.h"
#include <utf/utf.h>

namespace imgproc
{

////////////////////////////////////////

cpp_generator::cpp_generator( std::ostream &cpp )
	: _cpp( cpp )
{
	auto table = std::make_shared<function_table>( [&](const std::u32string &f ,const std::vector<type> &args )
	{
		return this->generate( f, args );
	} );

	_globals->set_functions( table );

	// Add default stuff
	_cpp << "// Generated by imgc\n";
	_cpp << "#include <imgproc/buffer.h>\n";
	_cpp << "using namespace imgproc;";
	_cpp << "\n";

	// Add built-in functions
	table->add( U"floor", std::make_shared<func>( U"floor", U"x" ) );
	table->add( U"ceil", std::make_shared<func>( U"ceil", U"x" ) );
	table->add( U"abs", std::make_shared<func>( U"abs", U"x" ) );
}

////////////////////////////////////////

void cpp_generator::add_functions( const std::vector<std::shared_ptr<func>> &funcs )
{
	auto table = _globals->functions();
	for ( auto f: funcs )
		table->add( f->name(), f );
}

////////////////////////////////////////

type cpp_generator::generate( const std::u32string &name, const std::vector<type> &types )
{
	std::cout << std::flush;
	auto f = get_function( name );
	const auto &args = f->args();

	precondition( args.size() == types.size(), "expected {0} argument types, but got {1}", args.size(), types.size() );

	if ( !f->result() )
	{
		// Built-in function
		return types.front();
	}

	auto sc = std::make_shared<scope>( _globals );
	for ( size_t a = 0; a < args.size(); ++a )
		sc->add( args[a], types[a] );

	auto t = f->result()->result_type( sc );

	std::ostringstream code;
	code << "\n" << cpp_type( t ) << ' ' << name << "( ";
	for ( size_t a = 0; a < args.size(); ++a )
	{
		if ( a > 0 )
			code << ", ";
		code << cpp_type_const_ref( types[a] ) << args[a];
	}
	code << " )\n";
	code << "{\n";

	code << '\t' << cpp_type( t ) << ' ' << "result;\n";
	compile( code, 1, sc, f->result(), variable( U"result", t ) );

	code << '\t' << "return result;\n";

	code << "}\n\n";

	std::cout << "Generating for: " << name << '\n';
	for ( size_t i = 0 ; i < types.size(); ++i )
		std::cout << "  " << types[i] << '\n';
	std::cout << " => " << t << std::endl;

	_cpp << code.str();

	return t;
}

////////////////////////////////////////

void cpp_generator::compile( std::ostream &code, size_t indent, std::shared_ptr<scope> &sc, const std::shared_ptr<expr> &expr, const variable &result )
{
	std::string ind( indent, '\t' );
	if ( auto e = std::dynamic_pointer_cast<for_expr>( expr ) )
	{
		compile_context cc( code, { data_type::INT64, 0 } );
		auto newsc = std::make_shared<scope>( sc );
		const auto &vars = e->variables();
		const auto &ranges = e->ranges();
		for ( int i = vars.size() - 1; i >= 0; --i )
		{
			ind = std::string( indent, '\t' );
			code << ind << "for ( int64_t " << vars[i] << " = ";
			std::shared_ptr<range_expr> range;
			if ( ranges.size() > 1 )
				range = ranges[i];
			else
				range = ranges.front();
			if ( range->end() )
			{
				range->start()->compile( cc, newsc );
				code << "; " << vars[i] << " < ";
				range->end()->compile( cc, newsc );
				code << "; " << vars[i] << " += ";
				if ( range->by() )
					range->by()->compile( cc, newsc );
				else
					code << "1";
				code << " )\n";
			}
			else
			{
				std::ostringstream tmp;
				compile_context cc2( tmp, { data_type::FLOAT32, 0 } );
				range->start()->compile( cc2, newsc );
				code << tmp.str() << ".lower( " << i << " ); ";
				code << vars[i] << " < " << tmp.str() << ".upper( " << i << " )" << "; ";
				code << vars[i] << " += ";
				if ( range->by() )
					range->by()->compile( cc, newsc );
				else
					code << "1";
				code << " )\n";
			}
			code << ind << "{\n";
			indent++;
			newsc->add( vars[i], { data_type::UINT64, 0 } );
		}

		code << ind << '\t' << result.name() << "( ";
		for ( size_t i = 0; i < vars.size(); ++i )
		{
			if ( i > 0 )
				code << ", ";
			code << vars[i];
		}
		code << " ) = ";
		compile_context cc2( code, { result.get_type().first, 0 } );
		code << e->result()->compile( cc2, newsc );
		code << ";\n";

		for ( size_t i = 0; i < vars.size(); ++i )
		{
			indent--;
			ind = std::string( indent, '\t' );
			code << ind << "}\n";
		}
		code << "\n";
	}
	else
	{
		std::ostringstream tmp;
		compile_context cc( tmp, { data_type::FLOAT32, 0 } );
		code << expr->compile( cc, sc );
		code << ind << result.name() << " = " << tmp.str() << ";\n";
	}
}

////////////////////////////////////////

std::shared_ptr<func> cpp_generator::get_function( const std::u32string &name )
{
	auto f = _globals->functions()->get( name );
	if ( !f )
		throw_runtime( "function \"{0}\" not found", name );
	return f;
}

////////////////////////////////////////

}

