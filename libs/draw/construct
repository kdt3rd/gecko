
local srcs = {
	"polylines.cpp";
	"clipper.cpp";
--	"canvas.cpp";
--	"drawable.cpp";
	"geometry.cpp";
	"glyph.cpp";
--	"composite.cpp";
--	"object.cpp";
--	"stretchable.cpp";
--	"color_wheel.cpp";
	"tessellator.cpp";
}

local shaders = {
	"color_mesh.vert";
	"position_uv.vert";
	"quadrant.vert";
	"simple.vert";
	"text.vert";
	"texture.frag";
	"color_mesh.frag";
	"linear_gradient.frag";
	"radial_gradient.frag";
	"conical_gradient.frag";
	"single_color.frag";
	"text_bitmap.frag";
}

local cpp_shaders = {
	"#include \"shaders.h\"";
	"using base::resource;";
	"namespace draw";
	"{";
	"	base::data_resource shaders( {";
}

local shader_h = code.create(
	"shaders.h",
	{
		"#pragma once";
		"#include <base/data_resource.h>";
		"namespace draw";
		"{";
		"extern base::data_resource shaders;";
		"}";
} )

local shader_code = code.generate{
	output = "shaders.cpp",
	input_items = shaders,
	file_prefix = cpp_shaders,
	file_suffix = { " } );", "}" },
	item_prefix = { "\tresource { \"$item_name\",",
					"\t\t{"
	},
	item_indent = "\t\t\t",
	item_transform_func = "binary_cstring", -- eventually a lua function
	item_suffix = { "\t\t}, $item_file_size",
					"\t}" },
	comma_separate = true
}
shader_code:add_dependency( "order", shader_h )

lib = library "draw"
  source{ srcs, shader_code }:include_artifact_dir()
  libs{ "gl", "script" }
